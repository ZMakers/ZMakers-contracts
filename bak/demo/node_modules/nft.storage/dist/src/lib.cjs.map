{"version":3,"file":"lib.cjs","sources":["../../src/lib.js"],"sourcesContent":["/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\n\nimport { transform } from 'streaming-iterables'\nimport pRetry from 'p-retry'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport * as API from './lib/interface.js'\nimport * as Token from './token.js'\nimport { fetch, File, Blob, FormData } from './platform.js'\nimport { toGatewayURL } from './gateway.js'\n\nconst MAX_STORE_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\n\n/**\n * @implements API.Service\n */\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?:URL}} options\n   */\n  constructor({ token, endpoint = new URL('https://api.nft.storage') }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   */\n  static auth(token) {\n    if (!token) throw new Error('missing token')\n    return { Authorization: `Bearer ${token}` }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob} blob\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeBlob({ endpoint, token }, blob) {\n    const url = new URL(`upload/`, endpoint)\n\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content')\n    }\n\n    const request = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body: blob,\n    })\n    const result = await request.json()\n\n    if (result.ok) {\n      return result.value.cid\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob|API.CarReader} car\n   * @param {{onStoredChunk?: (size: number) => void}} [options]\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeCar({ endpoint, token }, car, { onStoredChunk } = {}) {\n    const targetSize = MAX_CHUNK_SIZE\n    const splitter =\n      car instanceof Blob\n        ? await TreewalkCarSplitter.fromBlob(car, targetSize)\n        : new TreewalkCarSplitter(car, targetSize)\n\n    const upload = transform(\n      MAX_CONCURRENT_UPLOADS,\n      async function (/** @type {AsyncIterable<Uint8Array>} */ car) {\n        const carParts = []\n        for await (const part of car) {\n          carParts.push(part)\n        }\n        const carFile = new Blob(carParts, {\n          type: 'application/car',\n        })\n        const res = await pRetry(\n          () => NFTStorage.storeBlob({ endpoint, token }, carFile),\n          { retries: MAX_STORE_RETRIES }\n        )\n        onStoredChunk && onStoredChunk(carFile.size)\n        return res\n      }\n    )\n\n    let root\n    for await (const cid of upload(splitter.cars())) {\n      root = cid\n    }\n\n    return /** @type {API.CIDString} */ (root)\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Iterable<File>} files\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeDirectory({ endpoint, token }, files) {\n    const url = new URL(`upload/`, endpoint)\n    const body = new FormData()\n    let size = 0\n    for (const file of files) {\n      body.append('file', file, file.name)\n      size += file.size\n    }\n\n    if (size === 0) {\n      throw new Error(\n        'Total size of files should exceed 0, make sure to provide some content'\n      )\n    }\n\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body,\n    })\n    const result = await response.json()\n\n    if (result.ok) {\n      return result.value.cid\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @template {API.TokenInput} T\n   * @param {API.Service} service\n   * @param {T} metadata\n   * @returns {Promise<API.Token<T>>}\n   */\n  static async store({ endpoint, token }, metadata) {\n    validateERC1155(metadata)\n\n    const url = new URL(`store/`, endpoint)\n    const body = Token.encode(metadata)\n    const paths = new Set(body.keys())\n\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body,\n    })\n\n    /** @type {API.StoreResponse<T>} */\n    const result = await response.json()\n\n    if (result.ok === true) {\n      const { value } = result\n      return Token.decode(value, paths)\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<API.StatusResult>}\n   */\n  static async status({ endpoint, token }, cid) {\n    const url = new URL(`${cid}/`, endpoint)\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token),\n    })\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created),\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @param {API.PublicService} service\n   * @param {string} cid\n   * @returns {Promise<API.CheckResult>}\n   */\n  static async check({ endpoint }, cid) {\n    const url = new URL(`check/${cid}/`, endpoint)\n    const response = await fetch(url.toString())\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin,\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<void>}\n   */\n  static async delete({ endpoint, token }, cid) {\n    const url = new URL(`${cid}/`, endpoint)\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token),\n    })\n    const result = await response.json()\n    if (!result.ok) {\n      throw new Error(result.error.message)\n    }\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   */\n  storeBlob(blob) {\n    return NFTStorage.storeBlob(this, blob)\n  }\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|API.CarReader} car\n   * @param {{onStoredChunk?: (size: number) => void}} [options]\n   */\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options)\n  }\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {Iterable<File>} files\n   */\n  storeDirectory(files) {\n    return NFTStorage.storeDirectory(this, files)\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  status(cid) {\n    return NFTStorage.status(this, cid)\n  }\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  delete(cid) {\n    return NFTStorage.delete(this, cid)\n  }\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  check(cid) {\n    return NFTStorage.check(this, cid)\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {API.TokenInput} T\n   * @param {T} token\n   * @returns {Promise<API.Token<T>>}\n   */\n  store(token) {\n    return NFTStorage.store(this, token)\n  }\n}\n\n/**\n * @param {API.TokenInput} metadata\n */\nconst validateERC1155 = ({ name, description, image, decimals }) => {\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError(\n      'string property `name` identifying the asset is required'\n    )\n  }\n  if (typeof description !== 'string') {\n    throw new TypeError(\n      'string property `description` describing asset is required'\n    )\n  }\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object')\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`)\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value')\n  }\n}\n\n/**\n * @param {API.Deal[]} deals\n * @returns {API.Deal[]}\n */\nconst decodeDeals = (deals) =>\n  deals.map((deal) => {\n    const { dealActivation, dealExpiration, lastChanged } = {\n      dealExpiration: null,\n      dealActivation: null,\n      ...deal,\n    }\n\n    return {\n      ...deal,\n      lastChanged: new Date(lastChanged),\n      ...(dealActivation && { dealActivation: new Date(dealActivation) }),\n      ...(dealExpiration && { dealExpiration: new Date(dealExpiration) }),\n    }\n  })\n\n/**\n * @param {API.Pin} pin\n * @returns {API.Pin}\n */\nconst decodePin = (pin) => ({ ...pin, created: new Date(pin.created) })\n\nconst TokenModel = Token.Token\nexport { TokenModel as Token }\nexport { NFTStorage, File, Blob, FormData, toGatewayURL }\n\n/**\n * Just to verify API compatibility.\n * @type {API.API}\n */\nconst api = NFTStorage\nvoid api\n"],"names":["fetch","Blob","TreewalkCarSplitter","transform","pRetry","FormData","token","Token.encode","Token.decode","Token.Token"],"mappings":"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MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,GAAE;AACxC,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACpB,MAAM,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;AAC3C,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,CAAC,IAAI,EAAE;AAClB,IAAI,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;AAC3C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE;AACzB,IAAI,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC;AAClD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,KAAK,EAAE;AACxB,IAAI,OAAO,UAAU,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;AACjD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,CAAC,GAAG,EAAE;AACd,IAAI,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC;AACvC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,CAAC,GAAG,EAAE;AACd,IAAI,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC;AACvC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,CAAC,GAAG,EAAE;AACb,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC;AACtC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,CAAC,KAAK,EAAE;AACf,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC;AACxC,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM,eAAe,GAAG,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK;AACpE;AACA,EAAE,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAChC,IAAI,MAAM,IAAI,SAAS;AACvB,MAAM,0DAA0D;AAChE,KAAK;AACL,GAAG;AACH,EAAE,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACvC,IAAI,MAAM,IAAI,SAAS;AACvB,MAAM,4DAA4D;AAClE,KAAK;AACL,GAAG;AACH,EAAE,IAAI,EAAE,KAAK,YAAYC,SAAI,CAAC,EAAE;AAChC,IAAI,MAAM,IAAI,SAAS,CAAC,gDAAgD,CAAC;AACzE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;AAC/C,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;AAClB;AACA;AACA;AACA,wFAAwF,CAAC,EAAC;AAC1F,GAAG;AACH;AACA,EAAE,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AACvE,IAAI,MAAM,IAAI,SAAS,CAAC,8CAA8C,CAAC;AACvE,GAAG;AACH,EAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,GAAG,CAAC,KAAK;AAC1B,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK;AACtB,IAAI,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG;AAC5D,MAAM,cAAc,EAAE,IAAI;AAC1B,MAAM,cAAc,EAAE,IAAI;AAC1B,MAAM,GAAG,IAAI;AACb,MAAK;AACL;AACA,IAAI,OAAO;AACX,MAAM,GAAG,IAAI;AACb,MAAM,WAAW,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;AACxC,MAAM,IAAI,cAAc,IAAI,EAAE,cAAc,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;AACzE,MAAM,IAAI,cAAc,IAAI,EAAE,cAAc,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;AACzE,KAAK;AACL,GAAG,EAAC;AACJ;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,GAAG,EAAE,OAAO,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAC;AACvE;AACK,MAAC,UAAU,GAAGQ;;;;;;;;;;;;;;;;;;;;;;;;"}